* Study

** Source Pages for Questions

[[https://www.careercup.com][- Careercup]]
- [[http://codercareer.blogspot.co.uk/][CoderCareer]]
- [[http://www.programcreek.com/2012/11/top-10-algorithms-for-coding-interview/][Algo]]

** Question 1

[[https://www.careercup.com/question?id=5745795300065280][Link to Source]]

Given a string of numbers, you can add a + or * sign between any two numbers,
find the maximum value you can get ex. s = "89" -> 8 * 9 = 72

#+BEGIN_SRC
int maxNumberString(String s)
#+END_SRC

*** Notes

- Numbers can not be negative since we use the digits of a string and a negative
  number is > 1 symbol
- 0 is special as it multiplying by 0 will always make the result <= to what it
  was so 0 needs to always be surronded by `+`
- 1 is special as multiplying by 1 will always keep the result = to the before,
  while adding would increase
- 1 means it is undecidable if the result should be mul or add, therefor we need
  to backtrack potentially

Ruby would allow building a string with the options but if we don't want to eval
a string we can build an expression and eval that expression. For evaluation a
recursive decent parser inspired eval would do the trick.

[[file:question_1.rb][Question 1 Solution]]

** Kadanes Algorithm

[[https://www.youtube.com/watch?v=86CQq3pKSUw][Kadanes Algorithm explained]]

Find the maximum sum subarray

*** Notes

- Keep track of the maximum in the current run, and the global maximum to return
- The maximum in the current run is updated by determining the maximum of adding
  the next number to the current max, should that maximum drop we start a new
  run
